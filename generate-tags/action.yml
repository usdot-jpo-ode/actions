name: Generate Docker Tags
description: Build release tags (<version>, <YYYY-Qn>, latest) or branch tag.

inputs:
  image:
    description: Full image name, e.g. usdotjpoode/jpo-ode
    required: true

outputs:
  tag_list:
    description: Comma-separated Docker tag list
    value: ${{ steps.out.outputs.tag_list }}

runs:
  using: composite
  steps:
    - id: ver  # semantic version from tag only
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          NEW_VER="${GITHUB_REF_NAME##*-}"
        else
          NEW_VER=""
        fi
        echo "new=$NEW_VER" >> "$GITHUB_OUTPUT"

    - id: yq  # resolve YYYY-Qn
      shell: bash
      run: |
        norm() {
          input="${1,,}"  # lowercase
          [[ "$input" =~ ^20[0-9]{2}-q[1-4]$ ]] && echo "$input"
        }
        YQ=''

        if [[ "$GITHUB_REF" == refs/heads/release/* ]]; then
          BR="${GITHUB_REF_NAME##release/}"
          [[ "$BR" =~ ^20[0-9]{2}-q[1-4]$ ]] && YQ="$(norm "$BR")"
        fi

        if [[ -z "$YQ" && ( "$GITHUB_REF_NAME" == master || "$GITHUB_REF" == refs/tags/* ) ]]; then
          git fetch --all
          mapfile -t rels < <(git for-each-ref --format='%(refname:short)' refs/remotes/origin/release)
          for rb in "${rels[@]}"; do
            git merge-base --is-ancestor "$rb" HEAD 2>/dev/null || continue
            BR="${rb#origin/release/}"
            [[ "$BR" =~ ^20[0-9]{2}-q[1-4]$ ]] || continue
            CAND="$(norm "$BR")"
            [[ -z "$YQ" || "$CAND" > "$YQ" ]] && YQ="$CAND"
          done
        fi

        if [[ -z "$YQ" && ( "$GITHUB_REF_NAME" == master || "$GITHUB_REF" == refs/tags/* ) ]]; then
          echo "::error::No release/YYYY-qN branch found"
          exit 1
        fi

        echo "yq=$YQ" >> "$GITHUB_OUTPUT"

    - id: build  # assemble final list of tags
      shell: bash
      run: |
        IMAGE="${{ inputs.image }}"
        VER="${{ steps.ver.outputs.new }}"
        YQ="${{ steps.yq.outputs.yq }}"
        TAGS=""

        if [[ -n "$VER" ]]; then
          TAGS="$IMAGE:$VER"
          if [[ -n "$YQ" ]]; then
            TAGS="$TAGS,$IMAGE:$YQ"
          fi
          TAGS="$TAGS,$IMAGE:latest"
        elif [[ "$GITHUB_REF_NAME" == master ]]; then
          echo "::error::Master push must be tagged"
          exit 1
        else
          TAGS="$IMAGE:${GITHUB_REF_NAME//\//-}"
        fi

        echo "tag_list=$TAGS" >> "$GITHUB_OUTPUT"

    - id: out  # surface to outputs
      shell: bash
      run: |
        echo "tag_list=${{ steps.build.outputs.tag_list }}" >> "$GITHUB_OUTPUT"
