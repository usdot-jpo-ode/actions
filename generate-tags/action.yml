name: Generate Docker Tags
description: Create three release tags (<version>, <YYYY-Qn>, latest) or
             a single branch tag for develop / release branches.

inputs:
  image:                
    description: Docker image name pushed to Hub
    required: true
  version_file:         # only used when build is a master push, not a tag
    description: File that contains the semantic version
    default: VERSION

outputs:
  tag_list:
    description: Comma-separated tag list to feed docker/build-push-action
    value: ${{ steps.out.outputs.tags }}

runs:
  using: composite
  steps:
    - id: ver      # decide the semantic version
      shell: bash
      run: |
        if [[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == refs/tags/* ]]; then
          NEW_VER="${GITHUB_REF_NAME##*-}"              # tag jpo-ode-4.2.0 → 4.2.0
        elif [[ -f "${{ inputs.version_file }}" ]]; then
          NEW_VER="$(tr -d '\r\n\t ' <"${{ inputs.version_file }}")"
        else
          echo "::error::Cannot determine semantic version" && exit 1
        fi
        echo "new=$NEW_VER" >>"$GITHUB_OUTPUT"

    - id: yq       # resolve YYYY-Qn from release branches
      shell: bash
      run: |
        norm() { echo "${1,,}" | sed 's/-/-Q/' | tr '[:lower:]' '[:upper:]'; }
        YQ=''
        # current branch is release/YYYY-qN → take it
        if [[ "$GITHUB_REF" == refs/heads/release/* ]]; then
          BR="${GITHUB_REF_NAME##release/}"
          [[ "$BR" =~ ^20[0-9]{2}-q[1-4]$ ]] && YQ="$(norm "$BR")"
        fi
        # master or tag build → pick the latest merged release branch
        if [[ -z "$YQ" && ( "$GITHUB_REF_NAME" == master || "$GITHUB_REF" == refs/tags/* ) ]]; then
          mapfile -t RELS < <(git for-each-ref --format='%(refname:short)' refs/remotes/origin/release)
          for r in "${RELS[@]}"; do
            git merge-base --is-ancestor "$r" HEAD 2>/dev/null || continue
            BR="${r#origin/release/}"
            [[ "$BR" =~ ^20[0-9]{2}-q[1-4]$ ]] || continue
            CAND="$(norm "$BR")"
            [[ -z "$YQ" || "$CAND" > "$YQ" ]] && YQ="$CAND"
          done
        fi
        [[ -n "$YQ" ]] || { echo "::error::No release/YYYY-qN branch found"; exit 1; }
        echo "yq=$YQ" >>"$GITHUB_OUTPUT"

    - id: build    # assemble the final list
      shell: bash
      run: |
        IMAGE="${{ inputs.image }}"
        if [[ "$GITHUB_REF_NAME" == master || "$GITHUB_REF" == refs/tags/* ]]; then
          TAGS="$IMAGE:${{ steps.ver.outputs.new }},$IMAGE:${{ steps.yq.outputs.yq }},$IMAGE:latest"
        else
          TAGS="$IMAGE:${GITHUB_REF_NAME//\//-}"
        fi
        echo "tags=$TAGS" >>"$GITHUB_OUTPUT"

    - id: out      # surface the tag list
      shell: bash
      run: echo "::set-output name=tags::${{ steps.build.outputs.tags }}"
